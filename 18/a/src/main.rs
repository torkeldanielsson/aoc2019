use std::collections::HashSet;

#[derive(Debug, PartialEq, Clone)]
struct Loc {
    val: char,
    dist: i32,
}

#[derive(Eq, PartialEq, Debug)]
struct VisitedState {
    keys: HashSet<char>,
    coords: Vec<(usize, usize)>,
    steps_in: i32,
    steps_to_finish: i32,
}

fn recursive_fill(map: &mut Vec<Vec<Loc>>, cur_x: usize, cur_y: usize, keys: &HashSet<char>) {
    let offsets: Vec<(i32, i32)> = vec![(1, 0), (-1, 0), (0, -1), (0, 1)];

    let d = map[cur_y][cur_x].dist;

    for (dx, dy) in &offsets {
        let iy = ((cur_y as i32) + dy) as usize;
        let ix = ((cur_x as i32) + dx) as usize;

        let d2 = map[iy][ix].dist;

        if (d2 == -1 || d2 > d + 1)
            && (map[iy][ix].val == '.'
                || keys.contains(&map[iy][ix].val)
                || ((map[iy][ix].val as u8 >= 'A' as u8 && map[iy][ix].val as u8 <= 'Z' as u8)
                    && keys.contains(&((map[iy][ix].val as u8 + 32) as char))))
        {
            map[iy][ix].dist = d + 1;
            recursive_fill(map, ix, iy, keys);
        }
    }
}

fn recursive_search(
    map: &mut Vec<Vec<Loc>>,
    coords: Vec<(usize, usize)>,
    keys: HashSet<char>,
    steps_in: i32,
    visited_states: &mut Vec<VisitedState>,
    lowest_res_tmp: &mut i32,
) -> (i32, HashSet<char>) {
    for visited_state in &mut visited_states.iter() {
        let diff_1: HashSet<_> = keys.difference(&visited_state.keys).collect();
        let diff_2: HashSet<_> = visited_state.keys.difference(&keys).collect();
        if diff_1.len() == 0 && diff_2.len() == 0 && visited_state.coords == coords {
            // println!("triggered! {:?}", coords);
            return (visited_state.steps_to_finish, keys);
        }
    }

    let offsets: Vec<(i32, i32)> = vec![(1, 0), (-1, 0), (0, -1), (0, 1)];

    let mut all_done = true;
    'outer: for y in 1..map.len() - 1 {
        for x in 1..map[y].len() - 1 {
            if (map[y][x].val as u8 >= 'a' as u8 && map[y][x].val as u8 <= 'z' as u8)
                && !keys.contains(&map[y][x].val)
            {
                all_done = false;
                break 'outer;
            }
        }
    }
    if all_done {
        if steps_in < *lowest_res_tmp {
            *lowest_res_tmp = steps_in;
            println!("new lowest res: {}", lowest_res_tmp);
        }

        return (0, keys);
    }

    #[derive(Debug, PartialEq, Clone)]
    struct PossiblePath {
        coords: Vec<(usize, usize)>,
        keys: HashSet<char>,
        steps: i32,
    }

    let mut possible_paths: Vec<PossiblePath> = Vec::new();

    for (cur_x, cur_y) in &coords {
        for y in 1..(map.len() - 1) {
            for x in 1..(map[y].len() - 1) {
                map[y][x].dist = -1;
            }
        }

        map[*cur_y][*cur_x].dist = 0;
        recursive_fill(map, *cur_x, *cur_y, &keys);

        for y in 1..map.len() - 1 {
            for x in 1..map[y].len() - 1 {
                if !keys.contains(&map[y][x].val)
                    && (map[y][x].val as u8 >= 'a' as u8 && map[y][x].val as u8 <= 'z' as u8)
                {
                    if map[y][x].dist != -1 {
                        println!("{:?}", keys);
                        panic!("unexpected {}", map[y][x].val);
                    }

                    for (dx, dy) in &offsets {
                        let iy = ((y as i32) + dy) as usize;
                        let ix = ((x as i32) + dx) as usize;
                        let d2 = map[iy][ix].dist;
                        if d2 != -1 {
                            let mut modified_keys = keys.clone();
                            modified_keys.insert(map[y][x].val);

                            let mut mod_coords: Vec<(usize, usize)> = Vec::new();

                            for (cx, cy) in &coords {
                                if cx == cur_x && cy == cur_y {
                                    mod_coords.push((x, y));
                                } else {
                                    mod_coords.push((*cx, *cy));
                                }
                            }

                            possible_paths.push(PossiblePath {
                                coords: mod_coords,
                                keys: modified_keys,
                                steps: d2 + 1,
                            });
                        }
                    }
                }
            }
        }
    }

    possible_paths.sort_by(|a, b| a.steps.cmp(&b.steps));

    // println!("{:?}", possible_paths);

    let mut local_lowest = std::i32::MAX;
    let mut steps_to_next = std::i32::MAX;
    let mut best_keys = HashSet::new();

    for possible_path in possible_paths {
        let (mut recursive_res, recursive_keys) = recursive_search(
            map,
            possible_path.coords,
            possible_path.keys,
            steps_in + possible_path.steps,
            visited_states,
            lowest_res_tmp,
        );
        if recursive_res != std::i32::MAX {
            recursive_res += possible_path.steps;
        }
        if recursive_res < local_lowest {
            local_lowest = recursive_res;
            steps_to_next = possible_path.steps;
            best_keys = recursive_keys;

            if steps_in == 0 {
                println!("lowest: {}", local_lowest);
            }
        }
    }

    visited_states.push(VisitedState {
        keys: keys.clone(),
        coords: coords.clone(),
        steps_in: steps_in,
        steps_to_finish: local_lowest,
    });

    // let mut prstr = format!("steps_in: {:?}\n", steps_in);
    // prstr = format!("{}local_lowest: {:?}\n", prstr, local_lowest);
    // prstr = format!("{}steps_to_next: {:?}\n", prstr, steps_to_next);
    // prstr = format!("{}keys: {:?}\n", prstr, keys);
    // for (y, ml) in map.iter().enumerate() {
    //     for (x, p) in ml.iter().enumerate() {
    //         let mut robot = false;
    //         for (cur_x, cur_y) in &coords {
    //             if x == *cur_x && y == *cur_y {
    //                 prstr.push_str("@");
    //                 robot = true;
    //             }
    //         }
    //
    //         if !robot {
    //             if keys.contains(&p.val)
    //                 || ((p.val as u8 >= 'A' as u8 && p.val as u8 <= 'Z' as u8)
    //                     && keys.contains(&((p.val as u8 + 32) as char)))
    //             {
    //                 prstr.push_str(".");
    //             } else {
    //                 prstr = format!("{}{}", prstr, p.val);
    //             }
    //         }
    //     }
    //     prstr.push_str("\n");
    // }
    // println!("{}", prstr);

    // for (y, ml) in map.iter().enumerate() {
    //     for (x, p) in ml.iter().enumerate() {
    //         print!("{}", p.dist);
    //     }
    //     println!();
    // }

    return (local_lowest, best_keys);
}

fn main() {
    // a

    // 8
    // let input = "#########\n#b.A.@.a#\n#########";

    // 86
    // let input = "########################\n#f.D.E.e.C.b.A.@.a.B.c.#\n######################.#\n#d.....................#\n########################";

    // 132
    // let input = "########################\n#...............b.C.D.f#\n#.######################\n#.....@.a.B.c.d.A.e.F.g#\n########################";

    // 136
    // let input = "#################\n#i.G..c...e..H.p#\n########.########\n#j.A..b...f..D.o#\n########@########\n#k.E..a...g..B.n#\n########.########\n#l.F..d...h..C.m#\n#################";

    // 81
    // let input = "########################\n#@..............ac.GI.b#\n###d#e#f################\n###A#B#C################\n###g#h#i################\n########################";

    // 3764 (a)
    // let input = "#################################################################################\n#.#.......#...........#...#............p#.....#.#...#...........#..w............#\n#.#.#.###.#.#.#####.###.#.#########.###.#.###.#.#.#.#.#######.#.#######.#######.#\n#...#.#...#.#.#...#.#...#.........#...#.#.#.#.#...#...#.....#.#.....#...#.......#\n#.###.#.#####.#.#.###.###########.###U#.#.#.#.#.#######.###.#.#####.#.###.#######\n#.#.#.#.......#.#...#...#.......#.#...#.#.#.#.#...#.......#.#...#.#.#...#.#.....#\n#J#.#.#########.###.#.#.#.#######.#.###.#.#.#.#####.#######.#.#.#.#.#.#.###.###.#\n#...#.........#...#.#.#.#.#.....#.#.#...#.#.#.......#.#.....#.#.#.#.#.#...#.#.#.#\n###.#########.###.#.###.#.#.###.#.#.#.###.#.#########.#.#######.#.#.#####.#.#.#.#\n#...#...#...#.#...#.#...#...#...#.#.#...#.....#.....#.#...#...#.#...#.L.#.#.#.#o#\n#.###.###.#.#.#.###.#.#######.#.#.#.#########.#.###.#.###.#.#.#.###.#.#.#.#.#.#.#\n#...#...#.#...#.#.....#...#...#.#.#.E...#...#...#.#.#...#...#.#...#...#.#...#.#.#\n###.###.#.#####.#######.#.#.###.#.#.###.###.#####.#.###.#####.#.#.#####.#.###.#.#\n#.....#.#...#...#...#...#...#...#.#.#...#...#.....#.#...#...#.#.#.#.....#.T..d#.#\n#####.#.###.#.###.#.###.#####.###.###.#.#.#.#.###.#.#.#.###.#.#.#.###.#########.#\n#...#...#...#.....#...#.....#z..#.....#.#.#...#...#.#.#.#...#.#.#...#...........#\n#.#.#####.#.#########.#.###.###########.#.#######.#.#.#.#.#.#.#.###.###########.#\n#.#...#...#...#.#.....#.#...#.........#.#.#.....#.#.#.#...#.#.#.#...#...#...#...#\n#.###.#.#####.#.#.#####.#.###.#.#######.#.#.###.###.#.#####.#.###.###.#.#.#.#.###\n#.#...#.#...#.#.#.#.....#.....#...#.....#.#...#.....#.....#.#...#.#...#...#...#.#\n#.###.#.#.###.#.#.#####X#########.#.#####.###.#######.###.#.###V#.#.#########.#.#\n#.S.#...#...#...#...#.#.#...#...#.#.....#..b#.....#.#...#.#.#...#.#.....#...#...#\n#.#.#####.#.###.###.#.#.#.###.#.#.#####.#.#.#####.#.#.###.#.#####.#######.#.#####\n#.#.#.....#...#...#...#.#.....#.#.....#.#.#.....#.#.#.#...#.....#.........#s....#\n#.#.#.#######I###.#####.#######.#####.#.#.#######.#.#.#.#########.#############.#\n#.#.#.#...#.....#.....#.#...#.......#.#.#.#.....#.#...#.#.......#.#...#.......#.#\n###.#.###.#.#########.#.#.#.#.#####.#.#.#.#.###.#.#####.#.#####.#.#.#.###.###.#.#\n#...#.#...#...#...#...#...#...#...#.#...#.#...#.#.#...#.#...#...#...#.....#m#.#.#\n#.###.#.#####.#.#.#.###########.#.#.#####.###.#.#.#.#.#.###.#.#############.#.#.#\n#...#.#.....#...#.#.#.#.........#.#.#...#...#.#.#...#.#.....#.................#.#\n###.#.###.#.#####.#.#.#.#########.#.#.#.#.#.#.#.#####.#########################.#\n#...#.....#...#.#...#.#.#.#.......#.#.#.#.#...#.....#.....#...................#.#\n#.###########.#.#####.#G#.#.#####.#.#.#.#.#########.#####.#.#################.#.#\n#.........#...#.......#...#.#.....#...#.#.........#.....#.#.#...............#...#\n#.#######.#.###.#########.#.#.#########.#########.#.#####.#.#.###########.#.###.#\n#q#.#.....#.....#.....#..k#r#.#.........#.#.......#.....#...#...#.......#.#...#.#\n#.#.#.###########.###.#.###.###.#########.#.###########.#######.#.#.###.#.#####.#\n#...#.#...#.......#.#.#.#.#...#.#.....#.#.#.#.....#...#.........#.#.#..g#.C.#...#\n###.#.#.#.#.#######.#.#.#.###.#.#.###.#.#.#.#.###.#.#.#############.#.#####.#.###\n#...#...#.......A..c#.......#.....#...........#.....#.......R.......#.....#.....#\n#######################################.@.#######################################\n#.....#.....#...#................f....#.................F...#.........#.........#\n#.###.###.###.#.#.###.###############.#.#.#########.#.#####.#.###.###.#.#######.#\n#.#.......#...#...#...#.....#.......#...#...#.....#.#.#.#...#...#...#.#.Q.#...#.#\n#.#########.#######.###.###.#.#.#######.#####.###.###.#.#.#####.###.#####.#.###.#\n#.........#...#.......#.#.#.#.#.....#...#.....#.......#.#.....#.#...#.......#...#\n#.#######.###.#.#######.#.#.#######.#.###.#############.#####.#.#.###.#######.#.#\n#.Ot#.#.....#.#...#...#.#.#...#.....#...#...#...#.......#.....#.#.......#.#...#.#\n###.#.#.#####.#####.#.#.#.###.#.###.###.#.#.#.#.#####.#.#.#############.#.#.###.#\n#.#.#.#.....#.......#.....#...#.#.#.#...#.#...#.....#.#.#.#..a......#.....#.#...#\n#.#.#.#####.###############.###.#.#.#.###.#########.#.#.#.#####.###.#######.#.###\n#.#.#.....#...........#.....#...#.#.#.#.#.#.......#.#.#.#...#...#.......#...#...#\n#.#.###.#####.#####.###.#####.###.#.#.#.###.#####.#.#.#.###.#.#########.#.#####.#\n#.#.....#.....#.#...#...#.....#...#.#...#...#...#...#.#...#.#.....#.......#.....#\n#.###.###.#####.#.###.###.#####.#.#.###.#.###.#.#####.#.###.#.###K###############\n#.....#...#...#.....#.#.....#...#...#...#.....#.#.....#.#...#.#...#.....#.....N.#\n#.#####.###.###.#####.#####.#.#######.###.#####.###.#####.###.#.#.#.###.#.#####.#\n#.#.....#...#...#.....#.....#.....#.#.#.#.....#...#.....#...#.#.#.#...#...#...#.#\n#.#.#####.#.#.###.#####.#########.#.#.#.#####.###.#.###.###.###.#.###.#####.###.#\n#.#.....#.#...#.#.#.........#.....#.#.#.#...#.#.#.#...#.........#...#.#.....#...#\n#.#####M#.#####.#.#####.###.#####.#.#.#.#.#.#.#.#.###################.#.#.###.###\n#...#...#.#.....#.....#...#.....#.#.#.#.#.#.#.#.#.#.........#..y..H...#.#.....#.#\n###.#.###.#.###.#########.#####.#.#.#.#.#.#.#.#.#.#.#######.###########.#######.#\n#.#.#...#.#h#...#.......#.#.#..x#...#...#.#.#.#.#...#.......#.........#...#.....#\n#.#.###.#.###.#.#.#####.#.#.#.#.#######.#.#.#.#.#####.#####.#.###.###.###.#.###.#\n#...#...#.#...#.#.#...#.#...#.#.#...#.B.#.#.#...#...#.#...#.#...#...#...#...#.#.#\n#.###.###.#.###.#.#.###.###.#.###.#.#.###.#.###.#.#.#.#.#.#.#######.###.#####.#.#\n#.#...#.#.#...#...#.......#.#.....#.#...#.#...#.#.#.#.#.#.#...#.....#...#.....#.#\n###.###.#.#.#.#####.#######.#######.###.#.#####.#.#.#.###.###.#.#######.#.###.#.#\n#...#.#...#.#.#...#.Y...#...#.....#.....#.......#.#.#...#.....#.#.....#.#...#...#\n#.###.#.###.#.#.#.#######.###.###.#######.#########.###.#####.#.#.###.#####.#####\n#.#...D.#v..#.#.#.#.......#...#...#...#.#...#...#.....#.....#.#.#.#.#.....#...#.#\n#.###.###.###.#.#.#.#######.###.#.#.#.#.###.#.#Z#.#########.#.#.#.#.#####.###.#.#\n#...#...#.#...#.#...#...#.....#.#.#.#...#.#...#.#...#.......#...#.#...#.....#...#\n#.#.###.###W#.#.#####.###.#####.#.#.#####.#####.#.#.#.#####.#####.#.#P#.#.#####.#\n#.#...#.....#.#.....#.......#...#.#..l..#.....#.#.#.#.#.....#.....#.#.#.#.#...#i#\n#.###.#######.#####.#.#######.###.#####.#.###.#.#.#.#.#######.#####.###.###.#.#.#\n#...#...#....n#.....#...#..u..#...#.....#...#.#.#.#.#.....#...#.....#...#...#...#\n###.###.#######.#########.#####.###.###.#.#.###.###.#####.#.###.###.#.###.#######\n#.....#..e................#.........#...#.#.............#.......#...#........j..#\n#################################################################################";

    // b

    // 8
    // let input = "#######\n#a.#Cd#\n##@#@##\n#######\n##@#@##\n#cB#Ab#\n#######";

    // 24
    // let input = "###############\n#d.ABC.#.....a#\n######@#@######\n###############\n######@#@######\n#b.....#.....c#\n###############";

    // 32
    // let input = "#############\n#DcBa.#.GhKl#\n#.###@#@#I###\n#e#d#####j#k#\n###C#@#@###J#\n#fEbA.#.FgHi#\n#############";

    // 72
    // let input = "#############\n#g#f.D#..h#l#\n#F###e#E###.#\n#dCba@#@BcIJ#\n#############\n#nK.L@#@G...#\n#M###N#H###.#\n#o#m..#i#jk.#\n#############";

    // ?
    let input = "#################################################################################\n#.#.......#...........#...#............p#.....#.#...#...........#..w............#\n#.#.#.###.#.#.#####.###.#.#########.###.#.###.#.#.#.#.#######.#.#######.#######.#\n#...#.#...#.#.#...#.#...#.........#...#.#.#.#.#...#...#.....#.#.....#...#.......#\n#.###.#.#####.#.#.###.###########.###U#.#.#.#.#.#######.###.#.#####.#.###.#######\n#.#.#.#.......#.#...#...#.......#.#...#.#.#.#.#...#.......#.#...#.#.#...#.#.....#\n#J#.#.#########.###.#.#.#.#######.#.###.#.#.#.#####.#######.#.#.#.#.#.#.###.###.#\n#...#.........#...#.#.#.#.#.....#.#.#...#.#.#.......#.#.....#.#.#.#.#.#...#.#.#.#\n###.#########.###.#.###.#.#.###.#.#.#.###.#.#########.#.#######.#.#.#####.#.#.#.#\n#...#...#...#.#...#.#...#...#...#.#.#...#.....#.....#.#...#...#.#...#.L.#.#.#.#o#\n#.###.###.#.#.#.###.#.#######.#.#.#.#########.#.###.#.###.#.#.#.###.#.#.#.#.#.#.#\n#...#...#.#...#.#.....#...#...#.#.#.E...#...#...#.#.#...#...#.#...#...#.#...#.#.#\n###.###.#.#####.#######.#.#.###.#.#.###.###.#####.#.###.#####.#.#.#####.#.###.#.#\n#.....#.#...#...#...#...#...#...#.#.#...#...#.....#.#...#...#.#.#.#.....#.T..d#.#\n#####.#.###.#.###.#.###.#####.###.###.#.#.#.#.###.#.#.#.###.#.#.#.###.#########.#\n#...#...#...#.....#...#.....#z..#.....#.#.#...#...#.#.#.#...#.#.#...#...........#\n#.#.#####.#.#########.#.###.###########.#.#######.#.#.#.#.#.#.#.###.###########.#\n#.#...#...#...#.#.....#.#...#.........#.#.#.....#.#.#.#...#.#.#.#...#...#...#...#\n#.###.#.#####.#.#.#####.#.###.#.#######.#.#.###.###.#.#####.#.###.###.#.#.#.#.###\n#.#...#.#...#.#.#.#.....#.....#...#.....#.#...#.....#.....#.#...#.#...#...#...#.#\n#.###.#.#.###.#.#.#####X#########.#.#####.###.#######.###.#.###V#.#.#########.#.#\n#.S.#...#...#...#...#.#.#...#...#.#.....#..b#.....#.#...#.#.#...#.#.....#...#...#\n#.#.#####.#.###.###.#.#.#.###.#.#.#####.#.#.#####.#.#.###.#.#####.#######.#.#####\n#.#.#.....#...#...#...#.#.....#.#.....#.#.#.....#.#.#.#...#.....#.........#s....#\n#.#.#.#######I###.#####.#######.#####.#.#.#######.#.#.#.#########.#############.#\n#.#.#.#...#.....#.....#.#...#.......#.#.#.#.....#.#...#.#.......#.#...#.......#.#\n###.#.###.#.#########.#.#.#.#.#####.#.#.#.#.###.#.#####.#.#####.#.#.#.###.###.#.#\n#...#.#...#...#...#...#...#...#...#.#...#.#...#.#.#...#.#...#...#...#.....#m#.#.#\n#.###.#.#####.#.#.#.###########.#.#.#####.###.#.#.#.#.#.###.#.#############.#.#.#\n#...#.#.....#...#.#.#.#.........#.#.#...#...#.#.#...#.#.....#.................#.#\n###.#.###.#.#####.#.#.#.#########.#.#.#.#.#.#.#.#####.#########################.#\n#...#.....#...#.#...#.#.#.#.......#.#.#.#.#...#.....#.....#...................#.#\n#.###########.#.#####.#G#.#.#####.#.#.#.#.#########.#####.#.#################.#.#\n#.........#...#.......#...#.#.....#...#.#.........#.....#.#.#...............#...#\n#.#######.#.###.#########.#.#.#########.#########.#.#####.#.#.###########.#.###.#\n#q#.#.....#.....#.....#..k#r#.#.........#.#.......#.....#...#...#.......#.#...#.#\n#.#.#.###########.###.#.###.###.#########.#.###########.#######.#.#.###.#.#####.#\n#...#.#...#.......#.#.#.#.#...#.#.....#.#.#.#.....#...#.........#.#.#..g#.C.#...#\n###.#.#.#.#.#######.#.#.#.###.#.#.###.#.#.#.#.###.#.#.#############.#.#####.#.###\n#...#...#.......A..c#.......#.....#....@#@....#.....#.......R.......#.....#.....#\n#################################################################################\n#.....#.....#...#................f....#@#@..............F...#.........#.........#\n#.###.###.###.#.#.###.###############.#.#.#########.#.#####.#.###.###.#.#######.#\n#.#.......#...#...#...#.....#.......#...#...#.....#.#.#.#...#...#...#.#.Q.#...#.#\n#.#########.#######.###.###.#.#.#######.#####.###.###.#.#.#####.###.#####.#.###.#\n#.........#...#.......#.#.#.#.#.....#...#.....#.......#.#.....#.#...#.......#...#\n#.#######.###.#.#######.#.#.#######.#.###.#############.#####.#.#.###.#######.#.#\n#.Ot#.#.....#.#...#...#.#.#...#.....#...#...#...#.......#.....#.#.......#.#...#.#\n###.#.#.#####.#####.#.#.#.###.#.###.###.#.#.#.#.#####.#.#.#############.#.#.###.#\n#.#.#.#.....#.......#.....#...#.#.#.#...#.#...#.....#.#.#.#..a......#.....#.#...#\n#.#.#.#####.###############.###.#.#.#.###.#########.#.#.#.#####.###.#######.#.###\n#.#.#.....#...........#.....#...#.#.#.#.#.#.......#.#.#.#...#...#.......#...#...#\n#.#.###.#####.#####.###.#####.###.#.#.#.###.#####.#.#.#.###.#.#########.#.#####.#\n#.#.....#.....#.#...#...#.....#...#.#...#...#...#...#.#...#.#.....#.......#.....#\n#.###.###.#####.#.###.###.#####.#.#.###.#.###.#.#####.#.###.#.###K###############\n#.....#...#...#.....#.#.....#...#...#...#.....#.#.....#.#...#.#...#.....#.....N.#\n#.#####.###.###.#####.#####.#.#######.###.#####.###.#####.###.#.#.#.###.#.#####.#\n#.#.....#...#...#.....#.....#.....#.#.#.#.....#...#.....#...#.#.#.#...#...#...#.#\n#.#.#####.#.#.###.#####.#########.#.#.#.#####.###.#.###.###.###.#.###.#####.###.#\n#.#.....#.#...#.#.#.........#.....#.#.#.#...#.#.#.#...#.........#...#.#.....#...#\n#.#####M#.#####.#.#####.###.#####.#.#.#.#.#.#.#.#.###################.#.#.###.###\n#...#...#.#.....#.....#...#.....#.#.#.#.#.#.#.#.#.#.........#..y..H...#.#.....#.#\n###.#.###.#.###.#########.#####.#.#.#.#.#.#.#.#.#.#.#######.###########.#######.#\n#.#.#...#.#h#...#.......#.#.#..x#...#...#.#.#.#.#...#.......#.........#...#.....#\n#.#.###.#.###.#.#.#####.#.#.#.#.#######.#.#.#.#.#####.#####.#.###.###.###.#.###.#\n#...#...#.#...#.#.#...#.#...#.#.#...#.B.#.#.#...#...#.#...#.#...#...#...#...#.#.#\n#.###.###.#.###.#.#.###.###.#.###.#.#.###.#.###.#.#.#.#.#.#.#######.###.#####.#.#\n#.#...#.#.#...#...#.......#.#.....#.#...#.#...#.#.#.#.#.#.#...#.....#...#.....#.#\n###.###.#.#.#.#####.#######.#######.###.#.#####.#.#.#.###.###.#.#######.#.###.#.#\n#...#.#...#.#.#...#.Y...#...#.....#.....#.......#.#.#...#.....#.#.....#.#...#...#\n#.###.#.###.#.#.#.#######.###.###.#######.#########.###.#####.#.#.###.#####.#####\n#.#...D.#v..#.#.#.#.......#...#...#...#.#...#...#.....#.....#.#.#.#.#.....#...#.#\n#.###.###.###.#.#.#.#######.###.#.#.#.#.###.#.#Z#.#########.#.#.#.#.#####.###.#.#\n#...#...#.#...#.#...#...#.....#.#.#.#...#.#...#.#...#.......#...#.#...#.....#...#\n#.#.###.###W#.#.#####.###.#####.#.#.#####.#####.#.#.#.#####.#####.#.#P#.#.#####.#\n#.#...#.....#.#.....#.......#...#.#..l..#.....#.#.#.#.#.....#.....#.#.#.#.#...#i#\n#.###.#######.#####.#.#######.###.#####.#.###.#.#.#.#.#######.#####.###.###.#.#.#\n#...#...#....n#.....#...#..u..#...#.....#...#.#.#.#.#.....#...#.....#...#...#...#\n###.###.#######.#########.#####.###.###.#.#.###.###.#####.#.###.###.#.###.#######\n#.....#..e................#.........#...#.#.............#.......#...#........j..#\n#################################################################################";

    let mut map: Vec<Vec<Loc>> = Vec::new();

    for input_line in input.lines() {
        let line: Vec<Loc> = input_line
            .chars()
            .map(|c| Loc { val: c, dist: -1 })
            .collect();
        map.push(line);
    }

    let mut coords: Vec<(usize, usize)> = Vec::new();

    for (y, ml) in map.iter().enumerate() {
        for (x, p) in ml.iter().enumerate() {
            if p.val == '@' {
                coords.push((x, y));
            }
        }
    }

    let mut keys: HashSet<char> = HashSet::new();
    keys.insert('@');

    let mut visited_states: Vec<VisitedState> = Vec::new();

    let mut lowest_res_tmp = std::i32::MAX;

    let (res, res_keys) = recursive_search(
        &mut map,
        coords,
        keys,
        0,
        &mut visited_states,
        &mut lowest_res_tmp,
    );

    println!("res: {}\nkeys: {:?}", res, res_keys);
}
