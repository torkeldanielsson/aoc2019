use std::thread;

#[derive(Debug, PartialEq, Clone)]
struct Loc {
    passable: bool,
    dist: i32,
    is_portal: bool,
    portal_tag: String,
    portal_coord: (usize, usize),
    portal_is_outer: bool,
}

fn recursive_fill(map: &mut Vec<Vec<Vec<Loc>>>, cur_x: usize, cur_y: usize, level: usize) {
    let offsets: Vec<(i32, i32)> = vec![(1, 0), (-1, 0), (0, -1), (0, 1)];

    let d = map[level][cur_y][cur_x].dist;

    'loop_label: for (dx, dy) in &offsets {
        let mut ilevel = level;
        let mut ix = ((cur_x as i32) + dx) as usize;
        let mut iy = ((cur_y as i32) + dy) as usize;

        if map[ilevel][iy][ix].is_portal {
            if map[ilevel][iy][ix].portal_is_outer {
                if level == 0 {
                    continue 'loop_label;
                }
                ilevel -= 1;
            } else {
                if level == map.len() - 1 {
                    continue 'loop_label;
                }
                ilevel += 1;
            }

            let non_moving_portal_coords = &map[ilevel][iy][ix].portal_coord;
            ix = non_moving_portal_coords.0;
            iy = non_moving_portal_coords.1;
        }

        let d2 = map[ilevel][iy][ix].dist;

        if map[ilevel][iy][ix].passable && (d2 == -1 || d2 > d + 1) {
            map[ilevel][iy][ix].dist = d + 1;
            recursive_fill(map, ix, iy, ilevel);
        }
    }
}

fn run() {
    // a

    // 26
    // let input = "         A           \n         A           \n  #######.#########  \n  #######.........#  \n  #######.#######.#  \n  #######.#######.#  \n  #######.#######.#  \n  #####  B    ###.#  \nBC...##  C    ###.#  \n  ##.##       ###.#  \n  ##...DE  F  ###.#  \n  #####    G  ###.#  \n  #########.#####.#  \nDE..#######...###.#  \n  #.#########.###.#  \nFG..#########.....#  \n  ###########.#####  \n             Z       \n             Z       ";

    // 58
    // let input = "                   A               \n                   A               \n  #################.#############  \n  #.#...#...................#.#.#  \n  #.#.#.###.###.###.#########.#.#  \n  #.#.#.......#...#.....#.#.#...#  \n  #.#########.###.#####.#.#.###.#  \n  #.............#.#.....#.......#  \n  ###.###########.###.#####.#.#.#  \n  #.....#        A   C    #.#.#.#  \n  #######        S   P    #####.#  \n  #.#...#                 #......VT\n  #.#.#.#                 #.#####  \n  #...#.#               YN....#.#  \n  #.###.#                 #####.#  \nDI....#.#                 #.....#  \n  #####.#                 #.###.#  \nZZ......#               QG....#..AS\n  ###.###                 #######  \nJO..#.#.#                 #.....#  \n  #.#.#.#                 ###.#.#  \n  #...#..DI             BU....#..LF\n  #####.#                 #.#####  \nYN......#               VT..#....QG\n  #.###.#                 #.###.#  \n  #.#...#                 #.....#  \n  ###.###    J L     J    #.#.###  \n  #.....#    O F     P    #.#...#  \n  #.###.#####.#.#####.#####.###.#  \n  #...#.#.#...#.....#.....#.#...#  \n  #.#####.###.###.#.#.#########.#  \n  #...#.#.....#...#.#.#.#.....#.#  \n  #.###.#####.###.###.#.#.#######  \n  #.#.........#...#.............#  \n  #########.###.###.#############  \n           B   J   C               \n           U   P   P               ";

    // 396
    // let input = "             Z L X W       C                 \n             Z P Q B       K                 \n  ###########.#.#.#.#######.###############  \n  #...#.......#.#.......#.#.......#.#.#...#  \n  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  \n  #.#...#.#.#...#.#.#...#...#...#.#.......#  \n  #.###.#######.###.###.#.###.###.#.#######  \n  #...#.......#.#...#...#.............#...#  \n  #.#########.#######.#.#######.#######.###  \n  #...#.#    F       R I       Z    #.#.#.#  \n  #.###.#    D       E C       H    #.#.#.#  \n  #.#...#                           #...#.#  \n  #.###.#                           #.###.#  \n  #.#....OA                       WB..#.#..ZH\n  #.###.#                           #.#.#.#  \nCJ......#                           #.....#  \n  #######                           #######  \n  #.#....CK                         #......IC\n  #.###.#                           #.###.#  \n  #.....#                           #...#.#  \n  ###.###                           #.#.#.#  \nXF....#.#                         RF..#.#.#  \n  #####.#                           #######  \n  #......CJ                       NM..#...#  \n  ###.#.#                           #.###.#  \nRE....#.#                           #......RF\n  ###.###        X   X       L      #.#.#.#  \n  #.....#        F   Q       P      #.#.#.#  \n  ###.###########.###.#######.#########.###  \n  #.....#...#.....#.......#...#.....#.#...#  \n  #####.#.###.#######.#######.###.###.#.#.#  \n  #.......#.......#.#.#.#.#...#...#...#.#.#  \n  #####.###.#####.#.#.#.#.###.###.#.###.###  \n  #.......#.....#.#...#...............#...#  \n  #############.#.#.###.###################  \n               A O F   N                     \n               A A D   M                     ";

    // ?
    let input = "                                     K       V         M     Q           D     N                                         \n                                     J       R         U     D           R     I                                         \n  ###################################.#######.#########.#####.###########.#####.#######################################  \n  #...#.#.......#.......#.................#.#.#...........#...#.......#.......#...#.#.......#.#...................#.#.#  \n  ###.#.#.###.#######.#.#########.#.#####.#.#.#####.#.#.#.###.#.###.#######.###.###.#####.###.#.#.###.###.#.###.#.#.#.#  \n  #.....#.#.....#.....#...........#.#.#...#...#...#.#.#.#...#.#.#.#.#...#...#.......#...........#.#.#...#.#...#.#...#.#  \n  #.###.#.###.###############.#.#####.#.#####.###.###.#.#####.#.#.#.#.#.#.###.#.#######.###.#.#.###.#########.#######.#  \n  #.#.#.#.#.......#...........#.#.#.#.....#.#.......#.#.#.#.#.....#.#.#.....#.#.#.........#.#.#...#.....#.#.#...#.....#  \n  ###.#.###.#########.#.#.#####.#.#.#.###.#.#.#.#####.###.#.#######.#.#.#.###.#####.###.#####.#####.#####.#.#####.#####  \n  #.........#.#...#...#.#.#...#.#.....#.....#.#.....#...#...........#.#.#.#...#.#.....#...#.............#.........#.#.#  \n  ###.#####.#.###.###.#####.#########.#####.###.###.#.#######.###.#.#.###.#.#.###.#.#######.###.###.#####.#########.#.#  \n  #...#.#.#.........#.#.......#.....#...#.....#.#...#.#.........#.#.#...#.#.#.#...#...#...#...#...#...#.#.....#...#...#  \n  #.###.#.#.###.#.#######.#########.#####.#.#######.#.#########.#######.#####.#.###.###.#######.#.#####.#.#######.#.###  \n  #.#...#.#.#.#.#.#...#.#.....#.#.#...#.#.#...#.#...#.....#.......#.#.....#.......#.#.#.....#...#.#...................#  \n  #####.#.#.#.#####.###.###.#.#.#.#.###.###.###.###.###.###.###.###.#.#######.#.###.#.#.#.#.###########.#.#####.#####.#  \n  #.#.............#.#.....#.#...#.#.........#.......#.#.#.#.#.......#.#...#...#...#.....#.#.#...#.....#.#.#...#.....#.#  \n  #.###.#.#.#.#.###.###.#####.###.###.###.#####.###.#.#.#.###.###.#.#.#.#####.#.###.###.#####.###.#.###.###.###########  \n  #.#.#.#.#.#.#.#.#...#.................#.....#...#.#.....#.....#.#.#.......#.#.#...#.#.....#.....#.#.......#...#...#.#  \n  #.#.###.#######.#.#.#.###########.#.###.###.#####.#.#############.###.#########.#.#.#####.#.#####.###.###.###.###.#.#  \n  #.#.#...#.#...#.#.#.#.#.#...#.#.#.#...#.#...#.#.#.#.#...#.#.#.#.#.#...#...#.#.#.#.#.#.#.#...#...#.#.....#.....#.#...#  \n  #.#.#.###.#.###.###.###.#.#.#.#.#.#.#######.#.#.#.#.#.###.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.#######.#.###.###.#.###  \n  #...#.#.#.....#.#.....#...#.#.#.#.#...#.#.#.#.....#.............#.#...........#.#.......#.#...#.#.....#...#.#.#...#.#  \n  ###.#.#.#.#.###.###.#####.###.#.###.###.#.#######.#######.###.###.#.###.###.#####.#########.#.#.###.#######.#.#.###.#  \n  #.....#.#.#.#.#...#.#.....#.................#.#...#.........#.#.#.#.#...#...#.....#.#.#.#.#.#.#.#.#...#.#.#.#...#.#.#  \n  #####.#.###.#.#.###.#####.#.#########.#######.###.###.#######.#.#.###.#.###.#####.#.#.#.#.#####.#.#.###.#.#####.#.#.#  \n  #.....#.#.........#...#...#.#.#...........#.........#.......#.#.....#.#.#.#.#...#.....#...#...#.....#...#...#...#...#  \n  #####.#.###.###.###.###.#####.#####.#.#########.#######.###.#####.###.###.#####.#.#####.###.#####.###.#####.#.###.###  \n  #.......#...#.#.#.#.....#.....#.....#...#...#.......#.....#.#.#...#.........#.#...#.#.#.#...#.#.#...#...#.......#...#  \n  #.#.#.#.#####.#.#.#####.###.#######.#####.#####.###.###.#.###.#.#.#.#####.###.#.###.#.#.#.###.#.#.###.#####.#####.###  \n  #.#.#.#.#.#...#...#...#.#.....#.#.......#.#.#.#...#...#.#...#.#.#.#.#.......#...#.#.........#.#.#...#...#.#.#.#.....#  \n  #######.#.#.###.###.###.###.###.#####.###.#.#.###.#######.###.###.###.#########.#.#.#####.###.#.#.###.###.#.#.###.#.#  \n  #.#.......#...#.#.....#.#...#.#...........#.............#.#.........#.......#...........#.........#.#...#...#.#.#.#.#  \n  #.#######.#.###.#.###.#.###.#.###########.#.#############.#.#############.#####.#######.###.#.#####.#.#####.#.#.#.###  \n  #.#...#.#.....#.#.#.#.#.#.#...#          T O             V Q             N     K      #.#...#.#.#.#.#.#...#.#...#.#.#  \n  #.#.###.#.#####.###.#.#.#.#.###          J P             R H             I     J      #########.#.#.#.#.#.#.#.#.#.#.#  \n  #.................#...#...#.#.#                                                       #...#.......#...#.#.#...#.#...#  \n  #.#####.###.#####.#.#.#.#.#.#.#                                                       ###.#####.###.#####.###.#####.#  \n  #...#.....#...#.....#...#.....#                                                       #.#.#.....#...#.#.#...#...#...#  \n  #.#########.###.#.#.#.###.###.#                                                       #.#.#####.#.###.#.###.###.#.###  \n  #...#.......#...#.#.#...#...#..DR                                                     #...............#.....#.#.....#  \n  #.###########.###.#######.###.#                                                       ###.#######.###.#.#.###.#.#.###  \nQC....#.#.#.#.....#.#.....#.#...#                                                       #.....#.......#...#.#...#.#.#..CA\n  #####.#.#.#.#.###.###.#########                                                       #.#.#####.###.#####.#.#.#.#.#.#  \n  #.#.#.....#.#.#.....#.........#                                                       #.#.....#.#.....#.....#...#.#.#  \n  #.#.###.#.###########.###.###.#                                                       #.#.#####.#.#######.#.#.#.#.#.#  \nXF....#...#.......#.#.....#.#....KM                                                   QD..#.#.....#.#.......#.#.#.#...#  \n  #.#####.#.#######.#.#####.#####                                                       ###################.#.###.#####  \nZZ..#.....#.....#.#.#.#...#.....#                                                       #.#...#.....#.#.....#...#.#....LU\n  #.###.#.#.#####.#.###.#.#####.#                                                       #.###.###.###.###.#.#######.###  \n  #.....#.#.............#.......#                                                     WC......#.#.#.#...#.#.#.#...#....AA\n  ###############.#.#######.#.###                                                       #.#####.#.#.#.#######.#.#.#.#.#  \n  #.............#.#.#...#.#.#.#.#                                                       #.#.#.....#...#.#.#...#.#.#.#.#  \n  #.###.#######.#####.###.#####.#                                                       #.#.###.#####.#.#.###.#.#.###.#  \n  #.#...#.........#.......#.#.#..QC                                                     #.......................#.....#  \n  #.#.#.###.#############.#.#.#.#                                                       #############.#################  \n  #.#.#.#.#.#.......#.#.#.....#.#                                                     AO............#.#.....#.#.......#  \n  #.###.#.#.#.#######.#.#.#.###.#                                                       #.#.###.#.#.###.###.#.#.#####.#  \nME....#.#.................#.....#                                                       #.#.#.#.#.#.......#...#...#....XB\n  ###########.###.#.###.#.#.###.#                                                       #.#.#.#####.###.###.#####.#.###  \n  #.......#.....#.#...#.#.#.#.#.#                                                     MH..#.#.#...#...#.#.#.#...#.#...#  \n  #.#.###.###.#####.#########.###                                                       #####.#.#######.#.#.#.#.#.###.#  \n  #.#.#.#...#.#...#.#...#........XF                                                     #...#...#...#...#.....#.....#..NH\n  #.#.#.#.#####.#####.#####.###.#                                                       #.#####.#.#############.#####.#  \nHU..#.#.....#.#.....#.#.#.....#.#                                                       #.......#...........#.#.#.#...#  \n  #######.###.#.#####.#.#####.###                                                       #.#.###.#.###.#.#####.###.###.#  \n  #.#...#.....................#.#                                                       #.#.#...#...#.#.#.....#.#.#.#.#  \n  #.###.#######################.#                                                       #.###.#.###.#.#.###.###.#.#.###  \n  #.........#.............#.....#                                                     XB....#.#.#...#.#.#...#.....#.#..WY\n  #.#######.#.#######.#.#.#.#.#.#                                                       #.###.###.###.#####.###.###.#.#  \n  #.#...#...#...#...#.#.#.#.#.#.#                                                       #.#.......#.#.................#  \n  #.#.#.#.#.###.#####.###.#.#.###                                                       ###.#.#####.###################  \n  #...#.#.#...#.....#...#...#...#                                                       #...#.#.....#.......#.....#...#  \n  #####.#.#######.#############.#                                                       #########.#.#.###.#.#.###.#.#.#  \nAO......#.........#.#.....#.#....CA                                                     #.#.#.....#...#...#.....#...#.#  \n  #################.#####.#.#####                                                       #.#.###.###.#################.#  \n  #...#..........................WY                                                   LU....#.....#...#.#.#.....#...#..OP\n  #.#.#.###.#####.###.#.#########                                                       #.###.#########.#.#.#.###.###.#  \n  #.#...#.....#.#...#.#...#.....#                                                       #.....#.#.......#.#.#...#.#.#.#  \n  #.###.###.###.#.#############.#                                                       #######.#####.###.#####.#.#.###  \nWC....#.#.....#...#...#...#...#.#                                                     HU......#...#...#...#...#.......#  \n  #####.#.#.#####.#.#####.###.#.#                                                       #####.#.#.#.###.#.#.#.#.#####.#  \n  #...#.#.#.#.#.#.#...#.........#                                                       #.....#.#.......#...#...#......QL\n  #.#########.#.###.#.#.#######.#                                                       #.###.#.#####.###.#.#.#####.###  \n  #...#.#...#.#...#.#...#...#...#                                                       #...#.#...#...#...#.#.#.#.....#  \n  #.###.#.###.#.###.#.#.#####.###                                                       ###.###.###.#.###.###.#.###.###  \nQH....#.#...#.#.....#.#...#...#.#                                                       #.........#.#.#.....#.#.......#  \n  #.###.#.###.#.###.#######.###.#                                                       ###.#.#.#######.#.#.#.###.###.#  \n  #.............#.#.....#........QL                                                     #...#.#.#...#...#.#.#.#...#...#  \n  #.#.###.###.#.#.#.#.#.###.#.#.#                                                       ###.#.#.#.###.#.#.#.#########.#  \n  #.#.#...#...#.#...#.#.#.#.#.#.#                                                       #.#.#.#.....#.#.#.#.........#.#  \n  #####.#.#####.#######.#.###.###        H       N   M         K   R     Q         M    #.###.#.#####.#.#####.#######.#  \n  #.#...#...#.#.......#.#.#.#.#.#        K       H   E         A   B     N         U    #.#...#...#...#.....#...#.....#  \n  #.#####.#.#.#.#.#####.#.#.###.#########.#######.###.#########.###.#####.#########.#####.#.###.#.#.#.###.###.#######.#  \n  #.......#.#...#...#...#.#...............#...#...#.....#.......#.....#...#...#.#.#.......#...#.#.#.#.#.....#...#.....#  \n  ###.#.#.###.#.#.###.###.#####.#########.#.#####.###.#####.#.#.#.#######.#.#.#.#.###.#.###.#####.###.#####.#######.#.#  \n  #...#.#...#.#.#...#.#.#.#...#.#.#.#.#.......#.#.#.....#...#.#.#...#.....#.#.....#.#.#.#.......#...#.#.......#.#...#.#  \n  #.###.#######.#######.#.#.#####.#.#.#.#######.#.###.###.#####.###.###.#.#.###.###.#.#####.###.#########.#.###.###.#.#  \n  #.#...#.........#.....#...#.....#...........#.#...#...#.....#.#.....#.#.#.#...#.........#.#.......#.#.#.#...#...#.#.#  \n  #.###.###.###.###.###.#.#######.#####.#.#####.#.#####.#.#.###.#####.###.#.#.#.###.###########.#####.#.###.###.###.###  \n  #...#.#.#.#.....#...#.....#...........#.#.........#...#.#...#.#.#.....#.#.#.#.#.....#.#.#...#.....#.#.#.........#...#  \n  ###.#.#.#####.#######.#.#########.#####.###.#########.###.#####.###.#.#.#.#.###.#####.#.#.#########.#.###.#.###.#.###  \n  #...#.#.......#.....#.#.......#...#.....#.#.....#.#...#...#.#.#.....#.#...#.#...#.......#.....#.#...#.....#...#.#...#  \n  #########.#########.###.###.#########.#.#.#####.#.#.#####.#.#.#.###.#######.###.#.#.#####.#####.#.#######.#######.#.#  \n  #...............#.......#.....#.....#.#.#.......#.....#.......#.#...#.#.......#...#...#.#.#...#.....#...#.....#...#.#  \n  #.#.#.#.#.###.###.###.#####.#.#.#######.###.#####.#######.###.#.###.#.###.#.#####.#.###.#.#.#####.###.###.#########.#  \n  #.#.#.#.#.#.#.#...#...#.....#.....#.....#.......#.......#.#.#.#...#.#.....#...#...#...#...#.............#.#.....#...#  \n  #####.###.#.###.#.#########.#########.#.###.###.#####.#####.#.#.#######.#.###.#####.#.#.###.###.#.#########.#######.#  \n  #.#.....#...#...#.#.....#.......#.#.#.#.#.#.#.#...#...#.#.....#...#...#.#.#.#...#.#.#...#.....#.#...............#...#  \n  #.#.#####.#.###########.###.#.###.#.###.#.###.#.###.#.#.#####.#.###.###.###.#.###.#.#######.#.###.#####.#.###.#.#.#.#  \n  #...#.....#...#.........#...#.#.#...#.....#.....#...#.#...#...#...#...#...#.#.#.....#.#.....#...#...#.#.#...#.#.#.#.#  \n  #######.###.#.#####.###.###.###.#.#.#.###.###.###.#######.###.###.#.#.#.###.###.###.#.#.#######.#####.###.#.#########  \n  #.#.#...#...#.#.....#.............#.....#.#.....#...#.........#...#.#.#.#.....#.#.......#...#.#.......#...#.#...#...#  \n  #.#.#######.#############.#####.#.###.#########.###.#####.#.#.#.###.#.#.#.#.#####.#.#.#.#.###.#######.#########.###.#  \n  #.....#.#.......#.#.#.......#...#...#.#.......#...#...#...#.#.#.#...#.#...#.#.#...#.#.#.........#...#.....#.....#...#  \n  #.#.###.#.#.#####.#.###.#########.#####.#.#.###.#####.#.#####.#.#.###.#####.#.#####.#############.#########.#.#####.#  \n  #.#.......#.#.#.......#.#.........#...#.#.#...#.#.....#...#.#.#...#.#.#.......#...#.......#...........#.#.#.#.#.#...#  \n  #####.###.#.#.###.###.#.###.#.###.#.#.#.#.###.#.#.#.#.#.###.###.###.#.#.#########.#.#.#.###.#####.#.#.#.#.###.#.###.#  \n  #.....#.#.#.#.......#...#...#.#.....#.#.#.#.#...#.#.#.#...#.#.#...#...#.#.......#.#.#.#.#.....#.#.#.#.........#...#.#  \n  ###.###.#.#######.###.#.#############.###.#.#####.###.#.###.#.#####.###.#.#.#####.#.#####.#####.#######.#.#.###.#.#.#  \n  #...#.....#.#.#...#.#.#.#.#.#.....#.....#.#.....#.#...#.#.....#.......#...#...#.......................#.#.#.....#...#  \n  #.#####.###.#.#####.#####.#.#####.#####.#.###.#.#####.#.#.###.#####.#########.#####.#.#.#.#####.###.#.#####.#.#####.#  \n  #.#.....#...............................#.....#.#.....#...#...#.....#.........#.....#.#.#...#.....#.#.....#.#...#...#  \n  #################################.#############.#.#########.###.#########.#####.#####################################  \n                                   K             T H         Q   K         R     M                                       \n                                   A             J K         N   M         B     H                                       ";

    let mut raw_map: Vec<Vec<char>> = Vec::new();

    for input_line in input.lines() {
        let line: Vec<char> = input_line.chars().collect();
        raw_map.push(line);
    }

    // for y in 0..raw_map.len() {
    //     for x in 0..raw_map.last().unwrap().len() {
    //         print!("{}", raw_map[y][x]);
    //     }
    //     println!();
    // }

    let mut map: Vec<Vec<Loc>> = Vec::new();

    let offsets: Vec<(i32, i32)> = vec![(1, 0), (-1, 0), (0, -1), (0, 1)];

    for y in 1..(raw_map.len() - 1) {
        let mut map_line: Vec<Loc> = Vec::new();
        for x in 1..(raw_map.last().unwrap().len() - 1) {
            map_line.push(match &raw_map[y][x] {
                ' ' | '#' => Loc {
                    passable: false,
                    dist: -1,
                    is_portal: false,
                    portal_tag: String::new(),
                    portal_coord: (0, 0),
                    portal_is_outer: false,
                },
                '.' => Loc {
                    passable: true,
                    dist: -1,
                    is_portal: false,
                    portal_tag: String::new(),
                    portal_coord: (0, 0),
                    portal_is_outer: false,
                },
                'A'..='Z' => {
                    let v1 = &raw_map[y][x];

                    let mut tag: String = String::new();
                    let mut has_passable_neighbour = false;
                    for (dx, dy) in &offsets {
                        let iy = ((y as i32) + dy) as usize;
                        let ix = ((x as i32) + dx) as usize;

                        let v2 = &raw_map[iy][ix];

                        if v2 == &'.' {
                            has_passable_neighbour = true;
                        }

                        if v2 >= &'A' && v2 <= &'Z' {
                            tag = if iy > y || ix > x {
                                format!("{}{}", v1, v2)
                            } else {
                                format!("{}{}", v2, v1)
                            };
                        }
                        // println!("V2: {}", v2);
                    }

                    if tag == "" {
                        panic!("unexpected {}", v1);
                    }

                    let mut portal_is_outer = false;
                    if y == 1
                        || y == (raw_map.len() - 2)
                        || x == 1
                        || x == (raw_map.last().unwrap().len() - 2)
                    {
                        portal_is_outer = true;
                    }

                    if has_passable_neighbour {
                        Loc {
                            passable: false,
                            dist: -1,
                            is_portal: true,
                            portal_tag: tag,
                            portal_coord: (0, 0),
                            portal_is_outer: portal_is_outer,
                        }
                    } else {
                        Loc {
                            passable: false,
                            dist: -1,
                            is_portal: false,
                            portal_tag: String::new(),
                            portal_coord: (0, 0),
                            portal_is_outer: false,
                        }
                    }
                }
                _ => panic!(),
            })
        }
        map.push(map_line);
    }

    // for y in 0..map.len() {
    //     for x in 0..map.last().unwrap().len() {
    //         let loc = &map[y][x];
    //         if loc.passable {
    //             print!(".");
    //         } else if loc.is_portal {
    //             print!("{}", loc.portal_tag);
    //         } else {
    //             print!("#");
    //         }
    //     }
    //     println!();
    // }

    let mut start_coord: (usize, usize) = (0, 0);
    let mut end_coord: (usize, usize) = (0, 0);

    for y1 in 0..map.len() {
        for x1 in 0..map.last().unwrap().len() {
            let loc1 = map[y1][x1].clone();

            if loc1.is_portal {
                let mut pc1: (usize, usize) = (0, 0);
                for (dx, dy) in &offsets {
                    let ix = (x1 as i32) + dx;
                    let iy = (y1 as i32) + dy;
                    if iy > 0
                        && iy < map.len() as i32
                        && ix > 0
                        && ix < map.last().unwrap().len() as i32
                    {
                        let uy = iy as usize;
                        let ux = ix as usize;
                        if map[uy][ux].passable {
                            pc1 = (ux, uy);
                        }
                    }
                }

                if loc1.portal_tag == "AA" {
                    start_coord = pc1.clone();
                }
                if loc1.portal_tag == "ZZ" {
                    end_coord = pc1.clone();
                }

                for y2 in 0..map.len() {
                    for x2 in 0..map.last().unwrap().len() {
                        let loc2 = &map[y2][x2].clone();

                        if !(x1 == x2 && y1 == y2)
                            && &loc1.portal_tag == &loc2.portal_tag
                            && loc2.is_portal
                        {
                            let mut pc2: (usize, usize) = (0, 0);
                            for (dx, dy) in &offsets {
                                let ix = (x2 as i32) + dx;
                                let iy = (y2 as i32) + dy;
                                if iy > 0
                                    && iy < map.len() as i32
                                    && ix > 0
                                    && ix < map.last().unwrap().len() as i32
                                {
                                    let uy = iy as usize;
                                    let ux = ix as usize;
                                    if map[uy][ux].passable {
                                        pc2 = (ux, uy);
                                    }
                                }
                            }

                            map[y1][x1].portal_coord = pc2;
                            map[y2][x2].portal_coord = pc1;

                            // println!("tag: {}, pc2: {:?}, pc1: {:?}", &loc1.portal_tag, pc1, pc2);
                        }
                    }
                }
            }
        }
    }

    let mut multilevel_map: Vec<Vec<Vec<Loc>>> = Vec::new();

    for _ in 0..250 {
        multilevel_map.push(map.clone());
    }

    let non_moving_start_coord = &start_coord;

    multilevel_map[0][non_moving_start_coord.1][non_moving_start_coord.0].dist = 0;
    recursive_fill(
        &mut multilevel_map,
        non_moving_start_coord.0,
        non_moving_start_coord.1,
        0,
    );

    for level in 0..2 {
        for y in 0..multilevel_map[level].len() {
            for x in 0..multilevel_map[level].last().unwrap().len() {
                let loc = &multilevel_map[level][y][x];
                if loc.passable {
                    if loc.dist > 0 {
                        print!("{}", loc.dist % 10);
                    } else {
                        print!(" ");
                    }
                } else if loc.is_portal {
                    print!("P");
                // print!("{}", loc.portal_tag);
                } else {
                    print!("#");
                }
            }
            println!();
        }
        println!();
        println!();
        println!();
    }

    let non_moving_end_coord = &end_coord;

    println!("{:?}", non_moving_start_coord);
    println!("{:?}", non_moving_end_coord);

    println!(
        "res: {}",
        multilevel_map[0][non_moving_end_coord.1][non_moving_end_coord.0].dist
    );
}

fn main() {
    let child = thread::Builder::new()
        .stack_size(250000000)
        .spawn(run)
        .unwrap();

    child.join().unwrap();
}
